---
import * as crypto from "crypto";

export interface Props {
    title: string;
    multiplier: 1 | 2 | 3;
    inputSelector: string;
    resultClassName: string;
}

const { title, multiplier, inputSelector, resultClassName } = Astro.props;
const componentId = crypto.randomBytes(4).toString("hex");
---

<div id={componentId} class="grid grid-cols-9 gap-x-2 items-center">
    <span class="col-span-2">{title}</span>
    <div class="col-span-9 sm:col-span-5 flex justify-self-center">
        {
            [1, 2, 3, 4, 5].map((n) => (
                <>
                    <input class="hidden" type="radio" name={inputSelector} value={n * multiplier} />
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        xmlns:xlink="http://www.w3.org/1999/xlink"
                        class="cursor-pointer fill-lightGrey h-14 w-14 m-2 hover:fill-red"
                        width="100%"
                        viewBox="0 0 150 150"
                        enable-background="new 0 0 150 150"
                        xml:space="preserve"
                    >
                        <path
                            opacity="1.000000"
                            stroke="none"
                            d=" M45.770985,46.961472   C63.193760,46.988922 80.193672,47.320309 97.171410,46.850304   C104.664841,46.642860 112.114441,44.817196 119.580765,43.704815   C120.665756,43.543159 121.732903,43.261730 122.947182,43.435654   C117.667801,48.459610 110.864899,50.190914 104.190636,51.911964   C86.755531,56.407841 68.894783,56.003365 51.087669,55.994324   C40.825279,55.989113 41.041855,55.987751 39.930618,66.495171   C38.529175,79.746635 36.464909,92.930962 35.209827,106.193756   C34.548611,113.181015 34.162827,120.394417 35.157230,127.288696   C36.462826,136.340485 44.077980,138.911041 51.799316,133.725983   C53.677952,132.464432 55.498177,131.115891 58.022354,129.327682   C57.618771,130.783813 57.654087,131.838257 57.189892,132.150787   C51.757900,135.807983 46.678574,140.616776 40.669716,142.651642   C29.954433,146.280350 23.532742,140.675125 23.253462,130.491669   C22.960644,119.814445 24.440948,109.074486 25.379082,98.382362   C26.054995,90.678810 27.160027,83.013824 27.981268,75.321762   C28.454376,70.890450 28.556635,66.413712 29.164703,62.004147   C29.871769,56.876709 28.308460,54.984146 22.905737,55.033195   C19.339537,55.065575 15.772804,55.039330 11.418314,55.039330   C14.327809,50.840939 16.810528,47.184368 22.182062,46.989704   C31.327789,46.658272 31.327560,46.584229 32.030727,37.647682   C32.236889,35.027580 32.401123,32.336811 33.163948,29.856632   C33.538750,28.638050 35.086052,27.503075 36.370342,26.902857   C38.578152,25.871027 40.995499,25.287550 44.029331,24.282509   C43.643250,30.884590 43.137608,36.907272 43.058319,42.935570   C43.040901,44.259998 44.538944,45.604355 45.770985,46.961472  z"
                        />
                        <path
                            opacity="1.000000"
                            stroke="none"
                            d=" M130.764389,21.563770   C127.457130,15.694372 127.457130,15.694372 136.472015,8.568841   C142.440140,15.494121 138.194611,33.119656 130.482544,37.345474   C130.613434,32.603619 130.760666,27.270039 130.764389,21.563770  z"
                        />
                        <path
                            opacity="1.000000"
                            stroke="none"
                            d=" M124.642059,41.792381   C125.098099,41.337196 125.741989,41.134563 126.385887,40.931927   C126.447083,41.155186 126.508278,41.378441 126.569473,41.601696   C125.989616,41.749443 125.409767,41.897186 124.642059,41.792381  z"
                        />
                        <path
                            opacity="1.000000"
                            stroke="none"
                            d=" M59.082111,128.605591   C58.831100,128.952576 58.502266,129.028214 58.173431,129.103867   C58.450386,128.847336 58.727337,128.590805 59.082111,128.605591  z"
                        />
                    </svg>
                </>
            ))
        }
    </div>
    <span class="col-start-8 col-span-1 text-center" data-role="multiplier" data-multiplier={multiplier}
        >(x{multiplier})</span
    >
    <span class={`col-span-1 text-right ${resultClassName}`} data-role="result">-</span>
</div>

<script define:vars={{ componentId }}>
    const component = document.getElementById(componentId);

    const multiplier = parseInt(
        component.querySelector(`[data-role="multiplier"]`).getAttribute("data-multiplier"),
        10
    );
    const resultContainer = component.querySelector(`[data-role="result"]`);

    component.querySelectorAll("input").forEach((input) =>
        input.nextElementSibling.addEventListener("click", () => {
            input.checked = true;

            resultContainer.innerText = input.value;
        })
    );
</script>

<style>
    input[type="radio"] + svg {
        -webkit-transition: all 0.2s;
        transition: all 0.2s;
    }

    input:checked + svg {
        fill: theme("colors.red");
    }
</style>
